<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.zworks.pdsys.mappers.PurchaseMapper">
	<resultMap id="supplierResultMap" type="supplierModel" >  
        <id column="s_id" property="id"/>  
        <result column="s_name" property="name"/>  
    </resultMap>
    
    <resultMap id="unitResultMap" type="unitModel">
        <id column="u_id" property="id"/>
        <result column="u_name" property="name"/>
    </resultMap>

	<resultMap id="bomResultMap" type="bomModel" >  
        <id column="b_id" property="id"/>  
        <result column="b_pn" property="pn"/>  
        <result column="b_name" property="name"/>  
        <association property="unit" resultMap="unitResultMap"/>
        <collection property="suppliers" ofType="supplierModel" resultMap="supplierResultMap"/>
    </resultMap>

    <resultMap id="wareHouseEntryResultMap" type="wareHouseEntryModel" >  
        <id column="e_id" property="id" />  
        <result column="e_no" property="no" />  
    </resultMap>
    
    <resultMap id="userResultMap" type="userModel" >  
        <id column="user_id" property="id" />  
        <result column="user_no" property="no" />  
        <result column="user_name" property="name" />  
    </resultMap>
    
    <resultMap id="purchaseResultMap" type="purchaseModel" >  
        <id column="pb_purchase_id" property="id"/>
        <result column="p_no" property="no"/>
        <result column="p_create_date" property="createDate"/>  
        <result column="p_purchase_date" property="purchaseDate"/> 
        <result column="p_arrive_date" property="arriveDate"/>  
        <result column="p_state" property="state"/> 
        <association property="user" resultMap="userResultMap"/>  
        <association property="wareHouseEntry" resultMap="wareHouseEntryResultMap"/>
        <collection property="purchaseBOMs" ofType="purchaseBOMModel" resultMap="purchaseBomResultMap" />
    </resultMap>
    
	<resultMap id="purchaseBomResultMap" type="purchaseBomModel" >  
        <id column="pb_id" property="id"/>  
        <result column="pb_num" property="num"/>  
        <result column="pb_price" property="price"/>
        <association property="bom" resultMap="bomResultMap"/>
        <association property="supplier" resultMap="supplierResultMap" columnPrefix="s"/>
    </resultMap>

    <!-- 新增采购单 -->
	<insert id="savePurchase" parameterType="purchaseModel" useGeneratedKeys="true" keyProperty="id">
		insert into purchase_tbl
		(
		    `c_no`,
			`c_user_id`,
			`c_state`
		)
		values
		(
		    #{no},
			#{user.id},
			0
		)
	</insert>
	
	<!-- 新增采购单详细 -->
	<insert id="savePurchaseDetail" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">
		insert into purchase_bom_tbl
		(
			`c_purchase_id`,
			`c_bom_id`,
			`c_num`,
			`c_price`
		)
		values
	    <foreach collection="list" item="purchaseBom" index="index" separator=",">  
	        (#{purchaseBom.purchase.id},#{purchaseBom.bom.id},#{purchaseBom.num},#{purchaseBom.price})  
	    </foreach>
 
	</insert>
	
   	<delete id="delPurchaseDetail"  parameterType="purchaseBomModel">
    	delete from purchase_bom_tbl
    	<where>
			c_id = #{id}
		</where>
    </delete>
    
     <delete id="delete"  parameterType="purchaseModel">
    	delete from purchase_tbl
    	<where>
			c_id = #{id}
		</where>
    </delete>
    
	<!-- 通过采购单详细ID搜索采购单详细 -->
   	<select id="queryPurchaseBOM" resultMap="purchaseBomResultMap">
		select pb.c_id as pb_id,
		       pb.c_bom_id as pb_bom_id,
			   pb.c_num as pb_num,
		       pb.c_price as pb_price,
		       b.c_id as b_id,
		       b.c_pn as b_pn,
		       b.c_name as b_name,
		       s.c_id as s_id,
		       s.c_name as s_name,
		       ss.c_id as ss_id,
		       ss.c_name as ss_name 
		from purchase_bom_tbl as pb 
		left join bom_tbl as b on b.c_id = pb.c_bom_id
		left join bom_supplier_tbl as bs on bs.c_bom_id = pb.c_bom_id
		left join supplier_tbl as s on s.c_id = bs.c_supplier_id
		left join supplier_tbl as ss on ss.c_id = pb.c_supplier_id
		<where>
			<if test="id != null and id !=''">
				and pb.c_id = #{id}
			</if>
		</where>
	</select>
	
	<update id="updatePB" parameterType="purchaseBomModel">
    	update purchase_bom_tbl
		set	c_num = #{num},
			c_price = #{price},
			c_supplier_id = #{supplier.id}
    	<where>
			c_id = #{id}
		</where>
    </update>
    
    <!-- 通过采购单ID搜索采购单详细 -->
   	<select id="showPurchaseDetail" resultMap="purchaseBomResultMap">
		select pb.c_id as pb_id,
			   pb.c_purchase_id as pb_purchase_id,
		       pb.c_bom_id as pb_bom_id,
			   pb.c_num as pb_num,
		       pb.c_price as pb_price,
		       pb.c_supplier_id as pb_supplier_id,
		       ss.c_name as ss_name,
		       b.c_id as b_id,
		       b.c_pn as b_pn,
		       b.c_name as b_name,
		       s.c_id as s_id,
		       s.c_name as s_name,
		       ss.c_id as s_id,
		       ss.c_name as ss_name 
		from purchase_bom_tbl as pb 
		left join bom_tbl as b on b.c_id = pb.c_bom_id
		left join bom_supplier_tbl as bs on bs.c_bom_id = pb.c_bom_id
		left join supplier_tbl as s on s.c_id = bs.c_supplier_id
		left join supplier_tbl as ss on ss.c_id = pb.c_supplier_id 
		<where>
			<if test="purchase.id != null and purchase.id !=''">
				and pb.c_purchase_id = #{purchase.id}
			</if>
		</where>
	</select>
	
	<update id="updatePurchase" parameterType="purchaseModel">
		update purchase_tbl 
		<set> 
			`c_state` = #{state}, 
			`c_purchase_date` = #{purchaseDate},
		</set>
		where c_id = #{id}
	</update>
	
	<select id="queryList" resultMap="purchaseResultMap">
		select p.c_id as pb_purchase_id,
		       p.c_no as p_no,
			   p.c_create_date as p_create_date,
			   p.c_purchase_date as p_purchase_date,
			   p.c_arrive_date as p_arrive_date,
			   p.c_state as p_state,
			   user.c_id as user_id,
		       user.c_no as user_no,
		       user.c_name as user_name,
		       entry.c_id as e_id,
			   entry.c_no as e_no,
			   pb.c_id as pb_id,
		       pb.c_bom_id as pb_bom_id,
			   pb.c_num as pb_num,
		       pb.c_price as pb_price,
		       b.c_id as b_id,
		       b.c_pn as b_pn,
		       b.c_name as b_name,
		       u.c_id as u_id,
		       u.c_name as u_name,
		       s.c_id as s_id,
		       s.c_name as s_name,
		       ss.c_id as s_id,
		       ss.c_name as ss_name
		from purchase_tbl as p
		left join user_tbl as user on p.c_user_id = user.c_id 
		left join entry_tbl as entry on entry.c_id = p.c_entry_id
		left join purchase_bom_tbl as pb on p.c_id = pb.c_purchase_id
		left join bom_tbl as b on b.c_id = pb.c_bom_id
		left join bom_supplier_tbl as bs on bs.c_bom_id = pb.c_bom_id
		left join supplier_tbl as s on s.c_id = bs.c_supplier_id
		left join unit_tbl as u on u.c_id = b.c_unit_id
		left join supplier_tbl as ss on ss.c_id = pb.c_supplier_id
		<where>
			<if test="id > 0">
				and p.c_id = #{id}
			</if>
			<if test="no != null and no != ''">
				<choose>
					<when test="filterCond.fuzzyNoSearch != null and filterCond.fuzzyNoSearch">
						and p.c_no like concat('%',#{no},'%') 
					</when>
	                <otherwise>
						and p.c_no = #{no}
	                </otherwise>
	            </choose>
			</if>
			<if test="state >-1">
				and p.c_state = #{state}
			</if>
			<if test="purchaseBOMs != null and purchaseBOMs.size() != 0">
				and ( 
				<foreach collection ="purchaseBOMs" item="purchaseBOM" index= "index" separator ="or">
			    		b.c_pn like concat('%',#{purchaseBOM.bom.pn},'%')
			    </foreach>
			    )
			</if>
		</where>
		order by p.c_state asc, c_purchase_date desc
	</select>
</mapper>